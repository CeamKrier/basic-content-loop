{"version":3,"file":"static/js/636.dc8694cb.chunk.js","mappings":"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","sources":["components/Modal/index.tsx","components/Modal/Modal.tsx","components/FullCover/index.tsx","components/FullCover/FullCover.tsx","utils/helpers.ts","components/Showcase/Showcase.tsx","components/Showcase/index.ts","components/Notification/index.ts","components/Notification/Notification.tsx","pages/Main.tsx"],"sourcesContent":["import Modal from \"./Modal\";\r\n\r\nexport default Modal;\r\n","import React, { useState } from \"react\";\r\nimport { CloseOutlined, MenuOutlined } from \"@ant-design/icons\";\r\n\r\nimport { IModal } from \"./Modal.interface\";\r\n\r\nimport \"styles/components/modal.scss\";\r\n\r\nconst Modal = ({ children }: IModal) => {\r\n    const [isOpen, setOpen] = useState(false);\r\n\r\n    const onModalToggle = () => {\r\n        setOpen(!isOpen);\r\n    };\r\n\r\n    return (\r\n        <div className={`modal-wrapper ${!isOpen ? \"closed\" : \"\"}`}>\r\n            <div className='modal-toggler' onClick={onModalToggle}>\r\n                {isOpen ? <CloseOutlined /> : <MenuOutlined />}\r\n            </div>\r\n            <div className='modal'>{children}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import FullCover from \"./FullCover\";\r\n\r\nexport default FullCover;\r\n","import React, { useLayoutEffect } from \"react\";\r\n\r\nimport { IFullCover } from \"./FullCover.interface\";\r\n\r\nimport \"styles/components/full-cover.scss\";\r\n\r\nconst FullCover = ({ contentURL, contentType, visible }: IFullCover) => {\r\n    if (!contentURL || !contentType) {\r\n        return <></>;\r\n    }\r\n\r\n    let content;\r\n\r\n    if (contentType === \"video\") {\r\n        content = (\r\n            <div className='full-cover-video'>\r\n                <video src={contentURL} autoPlay muted loop></video>\r\n            </div>\r\n        );\r\n    } else if (contentType === \"image\") {\r\n        content = <div className='full-cover-image' style={{ backgroundImage: `url(${contentURL})` }}></div>;\r\n    }\r\n\r\n    return <div className={`full-cover${!visible ? \"-hidden\" : \"\"}`}>{content}</div>;\r\n};\r\n\r\nexport default FullCover;\r\n","export const sleep = (second = 1) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(() => {\r\n            resolve(true);\r\n        }, second * 1000);\r\n    });\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport FullCover from \"components/FullCover\";\r\n\r\nimport { IShowcase } from \"./Showcase.interface\";\r\nimport { sleep } from \"utils/helpers\";\r\n\r\nconst Showcase = ({ playlist }: IShowcase) => {\r\n    const [contentIndex, setContentIndex] = useState(-1);\r\n\r\n    const showNextContent = async () => {\r\n        const currentContent = playlist?.[contentIndex];\r\n        await sleep(currentContent?.duration);\r\n        setContentIndex(contentIndex + 1 < playlist?.length! ? contentIndex + 1 : 0);\r\n    };\r\n\r\n    useEffect(() => {\r\n        showNextContent();\r\n    }, [contentIndex]);\r\n\r\n    return (\r\n        <>\r\n            {playlist.map((ct, index) => (\r\n                <>\r\n                    <FullCover key={ct.url} contentType={ct?.type} contentURL={ct?.url} visible={index === contentIndex} />\r\n                </>\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Showcase;\r\n","import Showcase from \"./Showcase\";\r\n\r\nexport default Showcase;\r\n","import Notification from \"./Notification\";\r\n\r\nexport default Notification;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { CheckCircleOutlined, CloseCircleOutlined } from \"@ant-design/icons\";\r\n\r\nimport { INotification } from \"./Notification.interface\";\r\nimport \"styles/components/notification.scss\";\r\n\r\nconst Notification = ({ status, message }: INotification) => {\r\n    const isSucceeded = status === 200;\r\n    const notificationMessage = isSucceeded ? \"Content successfully added\" : message;\r\n\r\n    const [isVisible, setVisibility] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        if (status && message) {\r\n            setVisibility(true);\r\n        } else {\r\n            setVisibility(false);\r\n        }\r\n    }, [status, message]);\r\n\r\n    if (!isVisible) {\r\n        return <></>;\r\n    }\r\n\r\n    return (\r\n        <div className={`notification`}>\r\n            {isSucceeded ? <CheckCircleOutlined className='icon icon-success' /> : <CloseCircleOutlined className='icon icon-error' />}\r\n\r\n            {notificationMessage}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useMemo, useEffect, useState, useReducer } from \"react\";\nimport { Button, Input, InputNumber, Select } from \"antd\";\nimport { AxiosResponse } from \"axios\";\n\nimport Modal from \"components/Modal\";\nimport Showcase from \"components/Showcase\";\nimport Notification from \"components/Notification\";\nimport Spinner from \"components/Spinner\";\n\nimport { IPlaylist } from \"services/api.interface\";\nimport apiClient from \"services/api\";\n\nimport \"styles/pages/main.scss\";\n\nconst Option = Select.Option;\n\nconst MOCK_PLAYLIST: IPlaylist[] = [\n    {\n        name: \"A piano image\",\n        type: \"image\",\n        url: \"https://images.rawpixel.com/image_1000/czNmcy1wcml2YXRlL3Jhd3BpeGVsX2ltYWdlcy93ZWJzaXRlX2NvbnRlbnQvbHIvcHg4NDMxMzUtaW1hZ2Uta3d2eGdwdjEuanBn.jpg\",\n        duration: 3\n    },\n    {\n        name: \"A piano video\",\n        type: \"video\",\n        url: \"https://v3.cdnpk.net/videvo_files/video/free/video0475/large_watermarked/_import_61ff563b7ac975.89975859_preview.mp4\",\n        duration: 5\n    }\n];\n\nfunction App() {\n    const [playlist, setPlaylist] = useState<Array<IPlaylist>>(MOCK_PLAYLIST);\n\n    const [formValues, setFormValues] = useReducer((state: any, action: any) => {\n        switch (action.type) {\n            case \"contentName\":\n                return { ...state, contentName: action.value };\n            case \"contentUrl\":\n                return { ...state, contentUrl: action.value };\n            case \"contentDisplayDuration\":\n                return { ...state, contentDisplayDuration: action.value };\n            case \"contentType\":\n                return { ...state, contentType: action.value };\n            default:\n                return state;\n        }\n    }, {});\n\n    const [operationResponse, setOperationResponse] = useState<AxiosResponse<any, any>>();\n\n    const isSubmitDisabled = useMemo(() => {\n        return !formValues.contentName || !formValues.contentUrl || !formValues.contentDisplayDuration || !formValues.contentType;\n    }, [formValues]);\n\n    useEffect(() => {\n        // clear operation response\n        setTimeout(() => {\n            setOperationResponse(undefined);\n        }, 4000);\n    }, [operationResponse]);\n\n    const onContentNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setFormValues({ type: \"contentName\", value: event.target.value });\n    };\n\n    const onContentUrlChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setFormValues({ type: \"contentUrl\", value: event.target.value });\n    };\n\n    const onContentTypeChange = (value: string) => {\n        setFormValues({ type: \"contentType\", value });\n    };\n\n    const onDisplayDurationChange = (value: number | null) => {\n        setFormValues({ type: \"contentDisplayDuration\", value });\n    };\n\n    const onSubmit = async () => {\n        const payload = { name: formValues.contentName, url: formValues.contentUrl, duration: formValues.contentDisplayDuration, type: formValues.contentType };\n\n        try {\n            // const response = await apiClient.post(\"/add\", payload);\n\n            // if (response.status === 200) {\n            //     setPlaylist(response.data);\n            //     setOperationResponse(response);\n            // }\n\n            if (playlist.some(ct => ct.url === payload.url)) {\n                setOperationResponse({ status: 400, data: \"This content already exist on playlist\" } as any);\n                return;\n            }\n\n            setPlaylist([...playlist, payload]);\n            setOperationResponse({ status: 200, data: \"Content added successfully\" } as any);\n        } catch (error: any) {\n            setOperationResponse(error?.response as AxiosResponse);\n        }\n    };\n\n    if (!playlist) {\n        return <Spinner />;\n    }\n\n    return (\n        <div>\n            <Showcase playlist={playlist} />\n            <Modal>\n                <h3 className='modal-title'>Add Content</h3>\n                <div className='modal-row'>\n                    <span className='title'>Content Name</span>\n                    <Input placeholder='Enter name' onChange={onContentNameChange} />\n                </div>\n                <div className='modal-row'>\n                    <span className='title'>Content Address</span>\n                    <Input placeholder='Enter URL' onChange={onContentUrlChange} />\n                </div>\n                <div className='modal-row'>\n                    <span className='title'>Content Type</span>\n                    <Select placeholder='Select type' optionFilterProp='children' onChange={onContentTypeChange}>\n                        <Option value='video'>Video</Option>\n                        <Option value='image'>Image</Option>\n                    </Select>\n                </div>\n                <div className='modal-row'>\n                    <span className='title'>Display Duration</span>\n                    <InputNumber placeholder='Enter duration (seconds)' min={1} onChange={onDisplayDurationChange} />\n                </div>\n                <div className='modal-row'>\n                    <Button type='primary' onClick={onSubmit} disabled={isSubmitDisabled}>\n                        Submit\n                    </Button>\n                </div>\n            </Modal>\n            <Notification status={operationResponse?.status} message={operationResponse?.data} />\n        </div>\n    );\n}\n\nexport default App;\n"],"names":["_ref","children","_useState","useState","_useState2","_slicedToArray","isOpen","setOpen","_jsxs","className","concat","_jsx","onClick","CloseOutlined","MenuOutlined","content","contentURL","contentType","visible","src","autoPlay","muted","loop","style","backgroundImage","_Fragment","sleep","second","arguments","length","undefined","Promise","resolve","setTimeout","playlist","contentIndex","setContentIndex","showNextContent","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","currentContent","wrap","_context","prev","next","duration","stop","apply","useEffect","map","ct","index","FullCover","type","url","status","message","isSucceeded","notificationMessage","isVisible","setVisibility","CheckCircleOutlined","CloseCircleOutlined","Option","Select","MOCK_PLAYLIST","name","setPlaylist","_useReducer","useReducer","state","action","_objectSpread","contentName","value","contentUrl","contentDisplayDuration","_useReducer2","formValues","setFormValues","_useState3","_useState4","operationResponse","setOperationResponse","isSubmitDisabled","useMemo","onSubmit","payload","some","data","abrupt","_toConsumableArray","t0","response","Showcase","Modal","Input","placeholder","onChange","event","target","optionFilterProp","InputNumber","min","Button","disabled","Notification","Spinner"],"sourceRoot":""}